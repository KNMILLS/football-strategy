import{o as t,s as r,h as e,n as l,_ as n,l as u,a as p,r as y}from"./http-B_bVN8Ck.js";const v=t({yards:l().int(),clock:n(["10","20","30"]),tags:p(r()).optional(),turnover:t({type:n(["INT","FUM"]),return_yards:l().int(),return_to:n(["LOS"])}).optional(),oob:e().optional()}),_=t({result:n(["DEF_TD","OFF_TD"]),penalty_table_ref:r().optional()}),m=t({version:r(),off_card:r(),def_card:r(),dice:u("2d20"),entries:y(n(["3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39"]),v),doubles:t({1:_,20:_,"2-19":t({penalty_table_ref:r()})}),meta:t({oob_bias:e(),field_pos_clamp:e(),risk_profile:n(["low","medium","high"]),explosive_start_sum:l().int().min(20).max(39)})}).refine(a=>{if(!["3","4","5"].every(d=>d in a.entries))return!1;for(const[d,o]of Object.entries(a.entries))if(o.turnover&&(o.turnover.return_yards!==void 0&&o.turnover.return_yards<0||o.turnover.return_to&&o.turnover.return_to!=="LOS"))return!1;return!0},{message:"Table does not meet GDD requirements: must include entries 3-5 for turnover band, return yards must be non-negative, and return_to must be 'LOS'"}),b=t({version:r(),entries:t({1:t({side:n(["offense","defense","offset"]),yards:l().int().optional(),auto_first_down:e().optional(),loss_of_down:e().optional(),replay_down:e().optional(),override_play_result:e().optional(),label:r()}),2:t({side:n(["offense","defense","offset"]),yards:l().int().optional(),auto_first_down:e().optional(),loss_of_down:e().optional(),replay_down:e().optional(),override_play_result:e().optional(),label:r()}),3:t({side:n(["offense","defense","offset"]),yards:l().int().optional(),auto_first_down:e().optional(),loss_of_down:e().optional(),replay_down:e().optional(),override_play_result:e().optional(),label:r()}),4:t({side:n(["offense","defense","offset"]),yards:l().int().optional(),auto_first_down:e().optional(),loss_of_down:e().optional(),replay_down:e().optional(),override_play_result:u(!0),label:r()}),5:t({side:n(["offense","defense","offset"]),yards:l().int().optional(),auto_first_down:e().optional(),loss_of_down:e().optional(),replay_down:e().optional(),override_play_result:u(!0),label:r()}),6:t({side:n(["offense","defense","offset"]),yards:l().int().optional(),auto_first_down:e().optional(),loss_of_down:e().optional(),replay_down:e().optional(),override_play_result:u(!0),label:r()}),7:t({side:n(["offense","defense","offset"]),yards:l().int().optional(),auto_first_down:e().optional(),loss_of_down:e().optional(),replay_down:e().optional(),override_play_result:e().optional(),label:r()}),8:t({side:n(["offense","defense","offset"]),yards:l().int().optional(),auto_first_down:e().optional(),loss_of_down:e().optional(),replay_down:e().optional(),override_play_result:e().optional(),label:r()}),9:t({side:n(["offense","defense","offset"]),yards:l().int().optional(),auto_first_down:e().optional(),loss_of_down:e().optional(),replay_down:e().optional(),override_play_result:e().optional(),label:r()}),10:t({side:n(["offense","defense","offset"]),yards:l().int().optional(),auto_first_down:e().optional(),loss_of_down:e().optional(),replay_down:e().optional(),override_play_result:e().optional(),label:r()})})});function w(a){const s=[],d=["3","4","5"];for(const o of d)o in a.entries||s.push(`Missing required entry for sum ${o} (turnover band requirement)`);for(const[o,i]of Object.entries(a.entries)){const f=parseInt(o);i.turnover&&(i.turnover.return_yards!==void 0&&i.turnover.return_yards<0&&s.push(`Invalid negative return yards for sum ${o}`),i.turnover.return_to&&i.turnover.return_to!=="LOS"&&s.push(`Invalid return_to value for sum ${o}: only 'LOS' is supported`)),f>=a.meta.explosive_start_sum&&i.yards<20&&s.push(`Sum ${o} marked as explosive but has insufficient yards (${i.yards})`)}return(!a.doubles[1]||!a.doubles[20]||!a.doubles["2-19"])&&s.push("Missing required doubles entries (1, 20, 2-19)"),a.doubles["2-19"].penalty_table_ref||s.push("Missing penalty table reference for doubles 2-19"),{valid:s.length===0,errors:s}}function h(a){const s=[];for(let o=1;o<=10;o++){const i=o.toString();a.entries[i]||s.push(`Missing penalty entry for slot ${i}`)}const d=["4","5","6"];for(const o of d)a.entries[o]?.override_play_result||s.push(`Slot ${o} must have override_play_result: true (forced override requirement)`);for(let o=1;o<=10;o++){const i=o.toString(),f=a.entries[i];f?.yards!==void 0&&Math.abs(f.yards)>50&&s.push(`Unusual penalty yardage (${f.yards}) for slot ${i}`)}return{valid:s.length===0,errors:s}}export{m as M,b as P,h as a,w as v};
//# sourceMappingURL=validators-BtKpG0wR.js.map
