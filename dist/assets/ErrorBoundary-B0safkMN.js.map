{"version":3,"file":"ErrorBoundary-B0safkMN.js","sources":["../../src/ui/ErrorBoundary.ts"],"sourcesContent":["import { EventBus } from '../utils/EventBus';\r\n\r\n/**\r\n * Error boundary configuration options\r\n */\r\nexport interface ErrorBoundaryConfig {\r\n  /** Custom fallback component to render when an error occurs */\r\n  fallbackComponent?: (error: Error, retry: () => void) => HTMLElement;\r\n  /** Callback function called when an error occurs */\r\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\r\n  /** Whether to isolate the component (prevent error propagation) */\r\n  isolate?: boolean;\r\n  /** Component name for error reporting */\r\n  componentName?: string;\r\n  /** Whether to show error details in development */\r\n  showErrorDetails?: boolean;\r\n}\r\n\r\n/**\r\n * Error information for error boundary callbacks\r\n */\r\nexport interface ErrorInfo {\r\n  componentName?: string;\r\n  componentStack?: string;\r\n  errorBoundary?: string;\r\n}\r\n\r\n/**\r\n * Error boundary state\r\n */\r\ninterface ErrorBoundaryState {\r\n  hasError: boolean;\r\n  error: Error | null;\r\n  errorInfo: ErrorInfo | null;\r\n  retryCount: number;\r\n}\r\n\r\n/**\r\n * Error boundary class for handling component errors gracefully\r\n * Provides error isolation, fallback UI, and retry mechanisms\r\n */\r\nexport class ErrorBoundary {\r\n  private state: ErrorBoundaryState = {\r\n    hasError: false,\r\n    error: null,\r\n    errorInfo: null,\r\n    retryCount: 0\r\n  };\r\n\r\n  private config: Required<ErrorBoundaryConfig>;\r\n  private retryTimeoutId: number | null = null;\r\n  private originalErrorHandler: ((event: ErrorEvent) => void) | null = null;\r\n\r\n  constructor(config: ErrorBoundaryConfig = {}) {\r\n    this.config = {\r\n      fallbackComponent: config.fallbackComponent || this.createDefaultFallback,\r\n      onError: config.onError || this.defaultErrorHandler,\r\n      isolate: config.isolate ?? true,\r\n      componentName: config.componentName || 'UnknownComponent',\r\n      showErrorDetails: config.showErrorDetails ?? (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development')\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Wraps an HTMLElement with error boundary protection\r\n   * @param component - The DOM element to wrap\r\n   * @param config - Error boundary configuration\r\n   * @returns The wrapped element\r\n   */\r\n  static wrap<T extends HTMLElement>(component: T, config?: ErrorBoundaryConfig): T {\r\n    const boundary = new ErrorBoundary(config);\r\n    return boundary.wrapElement(component);\r\n  }\r\n\r\n  /**\r\n   * Wraps a component function that returns an HTMLElement\r\n   * @param componentFn - Function that creates and returns a DOM element\r\n   * @param config - Error boundary configuration\r\n   * @returns The wrapped element\r\n   */\r\n  static wrapComponent<T extends () => HTMLElement>(componentFn: T, config?: ErrorBoundaryConfig): T {\r\n    const boundary = new ErrorBoundary(config);\r\n\r\n    const wrappedFn = ((...args: []) => {\r\n      try {\r\n        const element = componentFn.apply(this, args);\r\n        return boundary.wrapElement(element);\r\n      } catch (error) {\r\n        return boundary.handleError(error as Error);\r\n      }\r\n    }) as T;\r\n\r\n    return wrappedFn;\r\n  }\r\n\r\n  /**\r\n   * Wraps an event bus listener with error boundary protection\r\n   * @param bus - Event bus instance\r\n   * @param eventType - Event type to listen for\r\n   * @param handler - Event handler function\r\n   * @param config - Error boundary configuration\r\n   * @returns Unsubscribe function\r\n   */\r\n  static wrapEventHandler(\r\n    bus: EventBus,\r\n    eventType: string,\r\n    handler: (...args: any[]) => void,\r\n    config?: ErrorBoundaryConfig\r\n  ): () => void {\r\n    const boundary = new ErrorBoundary(config);\r\n\r\n    const wrappedHandler = (...args: any[]) => {\r\n      try {\r\n        return handler.apply(this, args);\r\n      } catch (error) {\r\n        boundary.handleError(error as Error);\r\n        return undefined;\r\n      }\r\n    };\r\n\r\n    (bus as any).on(eventType, wrappedHandler);\r\n\r\n    return () => (bus as any).off(eventType, wrappedHandler);\r\n  }\r\n\r\n  /**\r\n   * Wraps a DOM element with error boundary protection\r\n   * @private\r\n   */\r\n  private wrapElement<T extends HTMLElement>(element: T): T {\r\n    if (this.config.isolate) {\r\n      this.setupErrorIsolation(element);\r\n    }\r\n\r\n    // Override addEventListener to catch errors in event handlers\r\n    const originalAddEventListener = element.addEventListener;\r\n    element.addEventListener = (...args: any[]) => {\r\n      const [eventType, handler, options] = args;\r\n\r\n      const wrappedHandler = (...handlerArgs: any[]) => {\r\n        try {\r\n          return handler.apply(this, handlerArgs);\r\n        } catch (error) {\r\n          this.handleError(error as Error);\r\n          return undefined;\r\n        }\r\n      };\r\n\r\n      return originalAddEventListener.call(element, eventType, wrappedHandler, options);\r\n    };\r\n\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Sets up error isolation for the component\r\n   * @private\r\n   */\r\n  private setupErrorIsolation(element: HTMLElement): void {\r\n    // Capture JavaScript errors within this element's scope\r\n    this.originalErrorHandler = window.onerror;\r\n\r\n    window.onerror = (message, source, lineno, colno, error) => {\r\n      // Check if the error originated from within our component\r\n      if (error && this.isErrorFromComponent(error, element)) {\r\n        this.handleError(error);\r\n        return true; // Prevent default error handling\r\n      }\r\n\r\n      // Call original handler for other errors\r\n      if (this.originalErrorHandler && error) {\r\n        try {\r\n          return this.originalErrorHandler(error as any);\r\n        } catch {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    };\r\n\r\n    // Clean up on element removal\r\n    const observer = new MutationObserver((mutations) => {\r\n      mutations.forEach((mutation) => {\r\n        mutation.removedNodes.forEach((node) => {\r\n          if (node === element || element.contains(node as Node)) {\r\n            this.cleanup();\r\n            observer.disconnect();\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    if (element.parentNode) {\r\n      observer.observe(element.parentNode, { childList: true, subtree: true });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if an error originated from within the component\r\n   * @private\r\n   */\r\n  private isErrorFromComponent(error: Error, element: HTMLElement): boolean {\r\n    // Simple heuristic: check if error stack trace contains references to our component\r\n    const stack = error.stack || '';\r\n    const componentSelectors = ['HUD', 'Log', 'Field', 'Hand', 'Controls'];\r\n\r\n    return componentSelectors.some(selector =>\r\n      stack.includes(selector) || element.id?.includes(selector.toLowerCase())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handles an error by updating state and showing fallback UI\r\n   * @private\r\n   */\r\n  private handleError(error: Error): HTMLElement {\r\n    this.state.hasError = true;\r\n    this.state.error = error;\r\n    this.state.errorInfo = {\r\n      componentName: this.config.componentName,\r\n      errorBoundary: 'ErrorBoundary'\r\n    };\r\n\r\n    // Call error callback if provided\r\n    try {\r\n      this.config.onError(error, this.state.errorInfo!);\r\n    } catch (callbackError) {\r\n      console.error('Error in error boundary callback:', callbackError);\r\n    }\r\n\r\n    // Log error for debugging\r\n    console.error(`ErrorBoundary caught error in ${this.config.componentName}:`, error);\r\n\r\n    // Create and return fallback component\r\n    return this.config.fallbackComponent(error, () => this.retry());\r\n  }\r\n\r\n  /**\r\n   * Retries the failed component\r\n   * @private\r\n   */\r\n  private retry(): void {\r\n    if (this.state.retryCount < 3) { // Max 3 retries\r\n      this.state.hasError = false;\r\n      this.state.error = null;\r\n      this.state.errorInfo = null;\r\n      this.state.retryCount++;\r\n\r\n      // Add a small delay before retry to avoid rapid error loops\r\n      if (this.retryTimeoutId) {\r\n        clearTimeout(this.retryTimeoutId);\r\n      }\r\n\r\n      this.retryTimeoutId = window.setTimeout(() => {\r\n        // Dispatch a custom event to trigger component re-initialization\r\n        window.dispatchEvent(new CustomEvent('errorBoundaryRetry', {\r\n          detail: { componentName: this.config.componentName }\r\n        }));\r\n      }, 100 * this.state.retryCount); // Exponential backoff\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a default fallback component\r\n   * @private\r\n   */\r\n  private createDefaultFallback(error: Error, retry: () => void): HTMLElement {\r\n    const fallback = document.createElement('div');\r\n    fallback.className = 'error-boundary-fallback';\r\n    fallback.style.cssText = `\r\n      padding: 16px;\r\n      margin: 8px;\r\n      border: 2px solid #ff6b6b;\r\n      border-radius: 8px;\r\n      background-color: #fff5f5;\r\n      color: #c92a2a;\r\n      font-family: monospace;\r\n      font-size: 14px;\r\n    `;\r\n\r\n    const title = document.createElement('div');\r\n    title.textContent = `⚠️ ${this.config.componentName} Error`;\r\n    title.style.fontWeight = 'bold';\r\n    title.style.marginBottom = '8px';\r\n\r\n    const message = document.createElement('div');\r\n    message.textContent = this.config.showErrorDetails ? error.message : 'Component failed to load';\r\n\r\n    const retryButton = document.createElement('button');\r\n    retryButton.textContent = 'Retry';\r\n    retryButton.style.cssText = `\r\n      margin-top: 8px;\r\n      padding: 4px 12px;\r\n      background-color: #007bff;\r\n      color: white;\r\n      border: none;\r\n      border-radius: 4px;\r\n      cursor: pointer;\r\n      font-size: 12px;\r\n    `;\r\n    retryButton.onclick = () => retry();\r\n\r\n    fallback.appendChild(title);\r\n    fallback.appendChild(message);\r\n    fallback.appendChild(retryButton);\r\n\r\n    return fallback;\r\n  }\r\n\r\n  /**\r\n   * Default error handler that logs to console\r\n   * @private\r\n   */\r\n  private defaultErrorHandler(error: Error, errorInfo: ErrorInfo): void {\r\n    console.group(`🚨 ErrorBoundary: ${errorInfo.componentName}`);\r\n    console.error('Error:', error);\r\n    console.log('Error Info:', errorInfo);\r\n    console.groupEnd();\r\n  }\r\n\r\n  /**\r\n   * Cleans up error boundary resources\r\n   * @private\r\n   */\r\n  private cleanup(): void {\r\n    if (this.retryTimeoutId) {\r\n      clearTimeout(this.retryTimeoutId);\r\n      this.retryTimeoutId = null;\r\n    }\r\n\r\n    // Restore original error handler\r\n    if (this.originalErrorHandler) {\r\n      window.onerror = this.originalErrorHandler as OnErrorEventHandler;\r\n      this.originalErrorHandler = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current error state\r\n   */\r\n  getState(): Readonly<ErrorBoundaryState> {\r\n    return { ...this.state };\r\n  }\r\n\r\n  /**\r\n   * Manually triggers error handling for testing\r\n   */\r\n  triggerError(error: Error): HTMLElement {\r\n    return this.handleError(error);\r\n  }\r\n\r\n  /**\r\n   * Resets the error boundary state\r\n   */\r\n  reset(): void {\r\n    this.state.hasError = false;\r\n    this.state.error = null;\r\n    this.state.errorInfo = null;\r\n    this.state.retryCount = 0;\r\n    this.cleanup();\r\n  }\r\n}\r\n"],"names":["ErrorBoundary","config","component","componentFn","boundary","args","element","error","bus","eventType","handler","wrappedHandler","originalAddEventListener","options","handlerArgs","message","source","lineno","colno","observer","mutations","mutation","node","stack","selector","callbackError","retry","fallback","title","retryButton","errorInfo"],"mappings":"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"}