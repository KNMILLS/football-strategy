{"version":3,"file":"validators-BtKpG0wR.js","sources":["../../src/data/schemas/MatchupTable.ts","../../src/data/schemas/validators.ts"],"sourcesContent":["import { z } from 'zod';\r\n\r\n// Schema for individual dice outcomes (sums 3-39)\r\nexport const DiceOutcomeSchema = z.object({\r\n  yards: z.number().int(),\r\n  clock: z.enum(['10', '20', '30']),\r\n  tags: z.array(z.string()).optional(),\r\n  // Optional fields for special outcomes\r\n  turnover: z.object({\r\n    type: z.enum(['INT', 'FUM']),\r\n    return_yards: z.number().int(),\r\n    return_to: z.enum(['LOS']),\r\n  }).optional(),\r\n  oob: z.boolean().optional(),\r\n});\r\n\r\n// Schema for doubles outcomes (1-1, 20-20, 2-19)\r\nexport const DoublesOutcomeSchema = z.object({\r\n  result: z.enum(['DEF_TD', 'OFF_TD']),\r\n  // For penalty doubles (2-19)\r\n  penalty_table_ref: z.string().optional(),\r\n});\r\n\r\n// Schema for complete matchup table\r\nexport const MatchupTableSchema = z.object({\r\n  version: z.string(),\r\n  off_card: z.string(),\r\n  def_card: z.string(),\r\n  dice: z.literal('2d20'),\r\n  entries: z.record(\r\n    z.enum(['3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39']),\r\n    DiceOutcomeSchema\r\n  ),\r\n  doubles: z.object({\r\n    '1': DoublesOutcomeSchema,\r\n    '20': DoublesOutcomeSchema,\r\n    '2-19': z.object({\r\n      penalty_table_ref: z.string(),\r\n    }),\r\n  }),\r\n  meta: z.object({\r\n    oob_bias: z.boolean(),\r\n    field_pos_clamp: z.boolean(),\r\n    risk_profile: z.enum(['low', 'medium', 'high']),\r\n    explosive_start_sum: z.number().int().min(20).max(39),\r\n  }),\r\n}).refine((data) => {\r\n  // GDD requirement: Turnover band includes 3â€“5 at minimum\r\n  const entries3to5 = ['3', '4', '5'].every(key => key in data.entries);\r\n  if (!entries3to5) {\r\n    return false;\r\n  }\r\n\r\n  // GDD requirement: Field-position clamp - yards never exceed remaining field\r\n  // This is enforced at runtime by the game engine, but we can validate basic constraints\r\n  for (const [sum, outcome] of Object.entries(data.entries)) {\r\n    const sumNum = parseInt(sum);\r\n    // Turnover outcomes should have return_yards if specified\r\n    if (outcome.turnover) {\r\n      if (outcome.turnover.return_yards !== undefined && outcome.turnover.return_yards < 0) {\r\n        return false; // Return yards cannot be negative\r\n      }\r\n      if (outcome.turnover.return_to && outcome.turnover.return_to !== 'LOS') {\r\n        return false; // Only LOS returns are supported\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}, {\r\n  message: \"Table does not meet GDD requirements: must include entries 3-5 for turnover band, return yards must be non-negative, and return_to must be 'LOS'\",\r\n});\r\n\r\n// Schema for penalty table (10 slots for d10 rolls)\r\nexport const PenaltyTableSchema = z.object({\r\n  version: z.string(),\r\n  entries: z.object({\r\n    // 1-10 penalty outcomes\r\n    '1': z.object({\r\n      side: z.enum(['offense', 'defense', 'offset']),\r\n      yards: z.number().int().optional(),\r\n      auto_first_down: z.boolean().optional(),\r\n      loss_of_down: z.boolean().optional(),\r\n      replay_down: z.boolean().optional(),\r\n      override_play_result: z.boolean().optional(),\r\n      label: z.string(),\r\n    }),\r\n    '2': z.object({\r\n      side: z.enum(['offense', 'defense', 'offset']),\r\n      yards: z.number().int().optional(),\r\n      auto_first_down: z.boolean().optional(),\r\n      loss_of_down: z.boolean().optional(),\r\n      replay_down: z.boolean().optional(),\r\n      override_play_result: z.boolean().optional(),\r\n      label: z.string(),\r\n    }),\r\n    '3': z.object({\r\n      side: z.enum(['offense', 'defense', 'offset']),\r\n      yards: z.number().int().optional(),\r\n      auto_first_down: z.boolean().optional(),\r\n      loss_of_down: z.boolean().optional(),\r\n      replay_down: z.boolean().optional(),\r\n      override_play_result: z.boolean().optional(),\r\n      label: z.string(),\r\n    }),\r\n    // Slots 4, 5, 6 are forced overrides (ignore play result)\r\n    '4': z.object({\r\n      side: z.enum(['offense', 'defense', 'offset']),\r\n      yards: z.number().int().optional(),\r\n      auto_first_down: z.boolean().optional(),\r\n      loss_of_down: z.boolean().optional(),\r\n      replay_down: z.boolean().optional(),\r\n      override_play_result: z.literal(true), // Must be true for forced overrides\r\n      label: z.string(),\r\n    }),\r\n    '5': z.object({\r\n      side: z.enum(['offense', 'defense', 'offset']),\r\n      yards: z.number().int().optional(),\r\n      auto_first_down: z.boolean().optional(),\r\n      loss_of_down: z.boolean().optional(),\r\n      replay_down: z.boolean().optional(),\r\n      override_play_result: z.literal(true), // Must be true for forced overrides\r\n      label: z.string(),\r\n    }),\r\n    '6': z.object({\r\n      side: z.enum(['offense', 'defense', 'offset']),\r\n      yards: z.number().int().optional(),\r\n      auto_first_down: z.boolean().optional(),\r\n      loss_of_down: z.boolean().optional(),\r\n      replay_down: z.boolean().optional(),\r\n      override_play_result: z.literal(true), // Must be true for forced overrides\r\n      label: z.string(),\r\n    }),\r\n    '7': z.object({\r\n      side: z.enum(['offense', 'defense', 'offset']),\r\n      yards: z.number().int().optional(),\r\n      auto_first_down: z.boolean().optional(),\r\n      loss_of_down: z.boolean().optional(),\r\n      replay_down: z.boolean().optional(),\r\n      override_play_result: z.boolean().optional(),\r\n      label: z.string(),\r\n    }),\r\n    '8': z.object({\r\n      side: z.enum(['offense', 'defense', 'offset']),\r\n      yards: z.number().int().optional(),\r\n      auto_first_down: z.boolean().optional(),\r\n      loss_of_down: z.boolean().optional(),\r\n      replay_down: z.boolean().optional(),\r\n      override_play_result: z.boolean().optional(),\r\n      label: z.string(),\r\n    }),\r\n    '9': z.object({\r\n      side: z.enum(['offense', 'defense', 'offset']),\r\n      yards: z.number().int().optional(),\r\n      auto_first_down: z.boolean().optional(),\r\n      loss_of_down: z.boolean().optional(),\r\n      replay_down: z.boolean().optional(),\r\n      override_play_result: z.boolean().optional(),\r\n      label: z.string(),\r\n    }),\r\n    '10': z.object({\r\n      side: z.enum(['offense', 'defense', 'offset']),\r\n      yards: z.number().int().optional(),\r\n      auto_first_down: z.boolean().optional(),\r\n      loss_of_down: z.boolean().optional(),\r\n      replay_down: z.boolean().optional(),\r\n      override_play_result: z.boolean().optional(),\r\n      label: z.string(),\r\n    }),\r\n  }),\r\n});\r\n\r\n// Type exports\r\nexport type DiceOutcome = z.infer<typeof DiceOutcomeSchema>;\r\nexport type DoublesOutcome = z.infer<typeof DoublesOutcomeSchema>;\r\nexport type MatchupTable = z.infer<typeof MatchupTableSchema>;\r\nexport type PenaltyTable = z.infer<typeof PenaltyTableSchema>;\r\n","import type { MatchupTable, PenaltyTable } from './MatchupTable';\r\n\r\n/**\r\n * Runtime validation functions for loaded table data\r\n * These complement the Zod schemas with additional business logic validation\r\n */\r\n\r\n/**\r\n * Validates that a matchup table meets all GDD requirements\r\n */\r\nexport function validateMatchupTable(table: MatchupTable): { valid: boolean; errors: string[] } {\r\n  const errors: string[] = [];\r\n\r\n  // Check turnover band requirement (3-5 must exist)\r\n  const turnoverBandSums = ['3', '4', '5'];\r\n  for (const sum of turnoverBandSums) {\r\n    if (!(sum in table.entries)) {\r\n      errors.push(`Missing required entry for sum ${sum} (turnover band requirement)`);\r\n    }\r\n  }\r\n\r\n  // Check field position constraints\r\n  for (const [sum, outcome] of Object.entries(table.entries)) {\r\n    const sumNum = parseInt(sum);\r\n\r\n    // Turnover validation\r\n    if (outcome.turnover) {\r\n      if (outcome.turnover.return_yards !== undefined && outcome.turnover.return_yards < 0) {\r\n        errors.push(`Invalid negative return yards for sum ${sum}`);\r\n      }\r\n      if (outcome.turnover.return_to && outcome.turnover.return_to !== 'LOS') {\r\n        errors.push(`Invalid return_to value for sum ${sum}: only 'LOS' is supported`);\r\n      }\r\n    }\r\n\r\n    // Explosive plays should have appropriate yardage\r\n    if (sumNum >= table.meta.explosive_start_sum && outcome.yards < 20) {\r\n      errors.push(`Sum ${sum} marked as explosive but has insufficient yards (${outcome.yards})`);\r\n    }\r\n  }\r\n\r\n  // Validate doubles configuration\r\n  if (!table.doubles['1'] || !table.doubles['20'] || !table.doubles['2-19']) {\r\n    errors.push('Missing required doubles entries (1, 20, 2-19)');\r\n  }\r\n\r\n  if (!table.doubles['2-19'].penalty_table_ref) {\r\n    errors.push('Missing penalty table reference for doubles 2-19');\r\n  }\r\n\r\n  return {\r\n    valid: errors.length === 0,\r\n    errors\r\n  };\r\n}\r\n\r\n/**\r\n * Validates that a penalty table meets all GDD requirements\r\n */\r\nexport function validatePenaltyTable(table: PenaltyTable): { valid: boolean; errors: string[] } {\r\n  const errors: string[] = [];\r\n\r\n  // Check that all 10 slots exist\r\n  for (let i = 1; i <= 10; i++) {\r\n    const slot = i.toString();\r\n    if (!table.entries[slot as keyof typeof table.entries]) {\r\n      errors.push(`Missing penalty entry for slot ${slot}`);\r\n    }\r\n  }\r\n\r\n  // Validate forced overrides (slots 4, 5, 6 must override play result)\r\n  const forcedOverrideSlots = ['4', '5', '6'];\r\n  for (const slot of forcedOverrideSlots) {\r\n    const entry = table.entries[slot as keyof typeof table.entries];\r\n    if (!entry?.override_play_result) {\r\n      errors.push(`Slot ${slot} must have override_play_result: true (forced override requirement)`);\r\n    }\r\n  }\r\n\r\n  // Validate penalty yardage is reasonable\r\n  for (let i = 1; i <= 10; i++) {\r\n    const slot = i.toString();\r\n    const entry = table.entries[slot as keyof typeof table.entries];\r\n    if (entry?.yards !== undefined && Math.abs(entry.yards) > 50) {\r\n      errors.push(`Unusual penalty yardage (${entry.yards}) for slot ${slot}`);\r\n    }\r\n  }\r\n\r\n  return {\r\n    valid: errors.length === 0,\r\n    errors\r\n  };\r\n}\r\n\r\n/**\r\n * Validates that loaded table data can be used safely in the game engine\r\n */\r\nexport function validateTableForEngine(table: MatchupTable | PenaltyTable): { valid: boolean; errors: string[] } {\r\n  if ('off_card' in table) {\r\n    // It's a matchup table\r\n    return validateMatchupTable(table);\r\n  } else {\r\n    // It's a penalty table\r\n    return validatePenaltyTable(table as PenaltyTable);\r\n  }\r\n}\r\n"],"names":["DiceOutcomeSchema","z.object","z.number","z.enum","z.array","z.string","z.boolean","DoublesOutcomeSchema","MatchupTableSchema","z.literal","z.record","data","key","sum","outcome","PenaltyTableSchema","validateMatchupTable","table","errors","turnoverBandSums","sumNum","validatePenaltyTable","i","slot","forcedOverrideSlots","entry"],"mappings":"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"}