{"version":3,"file":"game-rules-D85JeWwx.js","sources":["../../src/rules/LongGain.ts","../../src/rules/ResultParsing.ts","../../src/rules/Timekeeping.ts","../../src/rules/Charts.ts","../../src/rules/PenaltyAdmin.ts","../../src/rules/Spots.ts","../../src/rules/ResolvePlayCore.ts"],"sourcesContent":["export const LONG_GAIN_TABLE: Record<number, string> = {\r\n  1: '+50 and (+10 x 1D6)',\r\n  2: '+50',\r\n  3: '+45',\r\n  4: '+40',\r\n  5: '+35',\r\n  6: '+30',\r\n};\r\n\r\nexport type RNG = () => number;\r\n\r\nexport function rollD6(rng: RNG): number {\r\n  return Math.floor(rng() * 6) + 1;\r\n}\r\n\r\nexport function resolveLongGain(rng: RNG): number {\r\n  const roll = rollD6(rng);\r\n  const entry = LONG_GAIN_TABLE[roll];\r\n  if (!entry) return 30;\r\n  if (entry.includes('and')) {\r\n    // \"+50 and (+10 x 1D6)\"\r\n    const extra = rollD6(rng) * 10;\r\n    return 50 + extra;\r\n  }\r\n  const m = entry.match(/\\+(\\d+)/);\r\n  return m && m[1] ? parseInt(m[1], 10) : 30;\r\n}\r\n","import type { RNG } from '../sim/RNG';\r\n\r\nexport type OutcomeCategory = 'incomplete' | 'fumble' | 'interception' | 'penalty' | 'loss' | 'gain' | 'other';\r\n\r\nexport interface PenaltyInfo { on: 'offense' | 'defense'; yards: number; firstDown?: boolean }\r\nexport interface Outcome {\r\n  yards: number;\r\n  penalty: PenaltyInfo | null;\r\n  turnover: boolean;\r\n  interceptReturn: number;\r\n  firstDown: boolean;\r\n  raw?: string;\r\n  outOfBounds?: boolean;\r\n  category?: OutcomeCategory;\r\n}\r\n\r\nexport const DEFAULT_TIME_KEEPING = {\r\n  gain0to20: 30,\r\n  gain20plus: 45,\r\n  loss: 30,\r\n  outOfBounds: 15,\r\n  incomplete: 15,\r\n  interception: 30,\r\n  penalty: 15,\r\n  fumble: 15,\r\n  kickoff: 15,\r\n  fieldgoal: 15,\r\n  punt: 15,\r\n  extraPoint: 0,\r\n} as const;\r\n\r\nexport function parseResultString(str: string | null | undefined, resolveLongGain: (rng: RNG) => number, rng: RNG): Outcome {\r\n  const outcome: Outcome = { yards: 0, penalty: null, turnover: false, interceptReturn: 0, firstDown: false };\r\n  if (!str) return outcome;\r\n  const s = str.trim();\r\n  outcome.raw = s;\r\n  outcome.outOfBounds = /O\\/?B/i.test(s);\r\n  if (/Incomplete/i.test(s)) { outcome.category = 'incomplete'; return outcome; }\r\n  if (/FUMBLE/i.test(s)) { outcome.turnover = true; outcome.category = 'fumble'; return outcome; }\r\n  if (/INTERCEPT/i.test(s)) {\r\n    outcome.turnover = true; outcome.category = 'interception';\r\n    const m = s.match(/[+-]?\\d+/); if (m) outcome.interceptReturn = parseInt(m[0], 10);\r\n    return outcome;\r\n  }\r\n  if (/PENALTY/i.test(s)) {\r\n    const m = s.match(/[+-]\\d+/);\r\n    const yards = m ? parseInt(m[0], 10) : 0;\r\n    const onDefense = yards > 0;\r\n    outcome.penalty = { on: onDefense ? 'defense' : 'offense', yards: Math.abs(yards), firstDown: /1st\\s*Down/i.test(s) };\r\n    outcome.category = 'penalty';\r\n    return outcome;\r\n  }\r\n  if (/Sack/i.test(s)) {\r\n    const m = s.match(/-\\d+/); if (m) outcome.yards = parseInt(m[0], 10);\r\n    outcome.category = 'loss';\r\n    return outcome;\r\n  }\r\n  if (/LG/.test(s)) {\r\n    outcome.yards = resolveLongGain(rng);\r\n    outcome.category = 'gain';\r\n    return outcome;\r\n  }\r\n  const numMatch = s.match(/[+-]?\\d+/);\r\n  if (numMatch) { outcome.yards = parseInt(numMatch[0], 10); outcome.category = outcome.yards < 0 ? 'loss' : 'gain'; return outcome; }\r\n  const completeMatch = s.match(/Complete\\s*[+-]\\d+/i);\r\n  if (completeMatch) { const m2 = completeMatch[0].match(/[+-]\\d+/); if (m2) outcome.yards = parseInt(m2[0], 10); outcome.category = outcome.yards < 0 ? 'loss' : 'gain'; return outcome; }\r\n  outcome.category = 'other';\r\n  return outcome;\r\n}\r\n\r\nexport function calculateTimeOff(outcome: Outcome | null | undefined, TIME_KEEPING = DEFAULT_TIME_KEEPING): number {\r\n  if (!outcome) return TIME_KEEPING.gain0to20;\r\n  if (outcome.outOfBounds) return TIME_KEEPING.outOfBounds;\r\n  switch (outcome.category) {\r\n    case 'incomplete': return TIME_KEEPING.incomplete;\r\n    case 'interception': return TIME_KEEPING.interception;\r\n    case 'fumble': return TIME_KEEPING.fumble;\r\n    case 'penalty': return TIME_KEEPING.penalty;\r\n    case 'loss': return TIME_KEEPING.loss;\r\n    case 'gain': return Math.abs(outcome.yards) > 20 ? TIME_KEEPING.gain20plus : TIME_KEEPING.gain0to20;\r\n    default: return TIME_KEEPING.gain0to20;\r\n  }\r\n}\r\n","import { DEFAULT_TIME_KEEPING, calculateTimeOff } from './ResultParsing';\r\nimport type { TimeKeeping } from '../data/schemas/Timekeeping';\r\nimport type { Outcome } from './ResultParsing';\r\n\r\nexport function timeOffWithTwoMinute(outcome: Outcome, inTwoMinute: boolean, wasFirstDown: boolean, tk: TimeKeeping = DEFAULT_TIME_KEEPING as any): number {\r\n  // After two-minute warning, incomplete passes, out-of-bounds gains, and first-down conversions do not consume time.\r\n  let timeOff = calculateTimeOff(outcome, tk as any);\r\n  if (inTwoMinute) {\r\n    const isIncomplete = outcome.category === 'incomplete';\r\n    const isOut = !!outcome.outOfBounds;\r\n    if (isIncomplete || isOut || wasFirstDown) {\r\n      timeOff = 0;\r\n    }\r\n  }\r\n  return timeOff;\r\n}\r\n","import type { RNG } from '../sim/RNG';\r\nimport type { OffenseCharts } from '../data/schemas/OffenseCharts';\r\nimport { parseResultString } from './ResultParsing';\r\nimport { resolveLongGain as resolveLG } from './LongGain';\r\n\r\nexport const DEF_NUM_TO_LETTER: Record<number, 'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'> = { 1:'A',2:'B',3:'C',4:'D',5:'E',6:'F',7:'G',8:'H',9:'I',0:'J' };\r\n\r\nexport const DEF_LABEL_TO_NUM: Record<string, number> = {\r\n  'Goal Line': 1,\r\n  'Short Yardage': 2,\r\n  'Inside Blitz': 3,\r\n  'Running': 4,\r\n  'Run & Pass': 5,\r\n  'Pass & Run': 6,\r\n  'Passing': 7,\r\n  'Outside Blitz': 8,\r\n  'Prevent': 9,\r\n  'Prevent Deep': 0,\r\n};\r\n\r\nexport const DECK_NAME_TO_CHART_KEY: Record<string, keyof OffenseCharts> = {\r\n  'Pro Style': 'ProStyle',\r\n  'Ball Control': 'BallControl',\r\n  'Aerial Style': 'AerialStyle',\r\n} as const;\r\n\r\nexport const LABEL_TO_CHART_KEY: Record<string, string> = {\r\n  'Run & Pass Option': 'Run/Pass Option',\r\n  'Sideline Pass': 'Side Line Pass',\r\n};\r\n\r\nexport interface DetermineOutcomeParams {\r\n  deckName: string; // e.g. 'Pro Style'\r\n  playLabel: string; // e.g. 'Power Up Middle'\r\n  defenseLabel: string; // e.g. 'Inside Blitz'\r\n  charts: OffenseCharts;\r\n  rng: RNG;\r\n}\r\n\r\nexport function determineOutcomeFromCharts(params: DetermineOutcomeParams) {\r\n  const { deckName, playLabel, defenseLabel, charts, rng } = params;\r\n  const chartDeckKey = (DECK_NAME_TO_CHART_KEY as any)[deckName] || (deckName as keyof OffenseCharts);\r\n  const chartPlayKey = LABEL_TO_CHART_KEY[playLabel] || playLabel;\r\n  const defNum = DEF_LABEL_TO_NUM[defenseLabel];\r\n  const defLetter = (defNum != null ? DEF_NUM_TO_LETTER[defNum] : undefined) as 'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|undefined;\r\n  const deck = charts?.[chartDeckKey as keyof OffenseCharts] as any;\r\n  const play = deck ? deck[chartPlayKey] : undefined;\r\n  const resultStr = defLetter && play ? play[defLetter] : null;\r\n  return parseResultString(resultStr, resolveLG, rng);\r\n}\r\n\r\n\r\n","import type { GameState } from '../domain/GameState';\r\nimport type { Outcome, PenaltyInfo } from './ResultParsing';\r\nimport { DEFAULT_TIME_KEEPING } from './ResultParsing';\r\n\r\nexport interface PenaltyContext {\r\n  prePlayState: GameState; // state at snap\r\n  postPlayState: GameState; // state after play, before penalty\r\n  offenseGainedYards: number; // signed yards from snap relative to offense direction (0 if non-yardage)\r\n  outcome: Outcome; // contains penalty info, category, outOfBounds, etc.\r\n  inTwoMinute: boolean; // true if two-minute rules active\r\n  wasFirstDownOnPlay: boolean; // true if play gained/converted independent of penalty\r\n}\r\n\r\nexport interface AdminResult {\r\n  accepted: GameState;\r\n  declined: GameState;\r\n  decisionHint: 'accept' | 'decline' | 'neutral';\r\n  adminMeta: {\r\n    automaticFirstDownApplied: boolean;\r\n    halfDistanceCapped: boolean;\r\n    measuredFromMidfieldForLG: boolean;\r\n    spotBasis: 'previous' | 'spot-of-foul' | 'midfield';\r\n    untimedDownScheduled: boolean;\r\n  };\r\n}\r\n\r\nfunction clampBallOn(v: number): number {\r\n  return Math.max(0, Math.min(100, v));\r\n}\r\n\r\nfunction yardsTowardsOffense(pre: GameState, yards: number): number {\r\n  return pre.possession === 'player' ? yards : -yards;\r\n}\r\n\r\nfunction applyFromAbsolute(prevAbs: number, yardsTowardsOff: number): number {\r\n  return clampBallOn(prevAbs + yardsTowardsOff);\r\n}\r\n\r\nfunction distanceToOffenseGoal(pre: GameState, ballOnAbs: number): number {\r\n  // Distance from current spot to offense goal line along offense direction\r\n  return pre.possession === 'player' ? (100 - ballOnAbs) : ballOnAbs;\r\n}\r\n\r\nfunction distanceToDefenseGoal(pre: GameState, ballOnAbs: number): number {\r\n  // Distance from current spot to defense goal line (opposite of offense goal)\r\n  return pre.possession === 'player' ? ballOnAbs : (100 - ballOnAbs);\r\n}\r\n\r\nfunction capHalfDistance(amount: number, capDistance: number): { applied: number; capped: boolean } {\r\n  const cap = Math.floor(capDistance / 2);\r\n  if (amount > cap) return { applied: cap, capped: true };\r\n  return { applied: amount, capped: false };\r\n}\r\n\r\nfunction recomputeDownAndDistance(pre: GameState, newBallOn: number, resetFirstDown: boolean): { down: number; toGo: number } {\r\n  if (resetFirstDown) {\r\n    const yardsToGoal = pre.possession === 'player' ? (100 - newBallOn) : newBallOn;\r\n    const toGo = Math.min(10, yardsToGoal);\r\n    return { down: 1, toGo };\r\n  }\r\n  // No reset: repeat down on accepted penalty administered from previous spot\r\n  // (Standard scrimmage penalties replay the down)\r\n  const yardsToGoal = pre.possession === 'player' ? (100 - newBallOn) : newBallOn;\r\n  const lineToGainRemaining = Math.min(10, yardsToGoal); // assume fresh series retained at pre snap\r\n  return { down: Math.max(1, pre.down), toGo: Math.max(1, lineToGainRemaining) };\r\n}\r\n\r\nfunction isLongGain(outcome: Outcome): boolean {\r\n  if (!outcome) return false;\r\n  if (outcome.raw && /\\bLG\\b/i.test(outcome.raw)) return true;\r\n  return false;\r\n}\r\n\r\nfunction computeTimeOff(inTwoMinute: boolean, untimed: boolean): number {\r\n  if (untimed) return 0;\r\n  // Use penalty time from defaults\r\n  return DEFAULT_TIME_KEEPING.penalty;\r\n}\r\n\r\nfunction makeBase(state: GameState): GameState {\r\n  return { ...state, score: { ...state.score } };\r\n}\r\n\r\nfunction marchPenalty(pre: GameState, basisAbs: number, pen: PenaltyInfo, lgMidfield: boolean): { ballOn: number; capped: boolean; spotBasis: 'previous' | 'midfield' } {\r\n  const measuredFromMidfieldForLG = lgMidfield && pen.on === 'defense';\r\n  const spotBasis: 'previous' | 'midfield' = measuredFromMidfieldForLG ? 'midfield' : 'previous';\r\n  const startAbs = measuredFromMidfieldForLG ? 50 : basisAbs;\r\n  if (pen.on === 'defense') {\r\n    // March towards offense goal line; cap at half distance to offense goal from start\r\n    const distToGoal = distanceToOffenseGoal(pre, startAbs);\r\n    const { applied, capped } = capHalfDistance(pen.yards, distToGoal);\r\n    const newAbs = applyFromAbsolute(startAbs, yardsTowardsOffense(pre, applied));\r\n    return { ballOn: newAbs, capped, spotBasis };\r\n  } else {\r\n    // Against offense: march away from offense goal (towards defense goal) from previous spot\r\n    const distToDefGoal = distanceToDefenseGoal(pre, startAbs);\r\n    const { applied, capped } = capHalfDistance(pen.yards, distToDefGoal);\r\n    const newAbs = applyFromAbsolute(startAbs, yardsTowardsOffense(pre, -applied));\r\n    return { ballOn: newAbs, capped, spotBasis };\r\n  }\r\n}\r\n\r\nexport function administerPenalty(ctx: PenaltyContext): AdminResult {\r\n  const { prePlayState: pre, postPlayState: post, outcome, inTwoMinute } = ctx;\r\n  const pen = outcome.penalty!;\r\n  const lg = isLongGain(outcome);\r\n  const measuredFromMidfieldForLG = lg && pen.on === 'defense';\r\n\r\n  // Declined always keeps post-play state and normal clock off already applied later by caller\r\n  const declined = makeBase(post);\r\n\r\n  // Accepted: administered from previous spot by default, special LG from midfield\r\n  const march = marchPenalty(pre, pre.ballOn, pen, measuredFromMidfieldForLG);\r\n  const autoFD = !!pen.firstDown && pen.on === 'defense';\r\n  const dd = recomputeDownAndDistance(pre, march.ballOn, autoFD);\r\n\r\n  const acceptedBase: GameState = makeBase(pre);\r\n  let accepted: GameState = { ...acceptedBase, ballOn: march.ballOn, down: dd.down, toGo: dd.toGo };\r\n\r\n  // Timekeeping & untimed down rule: defensive penalty at 0:00 in regulation → untimed down\r\n  const isRegulation = pre.quarter <= 4;\r\n  const atZero = pre.clock === 0 || accepted.clock === 0;\r\n  const defensive = pen.on === 'defense';\r\n  const untimedDownScheduled = defensive && isRegulation && atZero;\r\n  const timeOff = computeTimeOff(inTwoMinute, untimedDownScheduled);\r\n  accepted.clock = Math.max(0, pre.clock - timeOff);\r\n\r\n  const adminMeta = {\r\n    automaticFirstDownApplied: autoFD,\r\n    halfDistanceCapped: march.capped,\r\n    measuredFromMidfieldForLG,\r\n    spotBasis: march.spotBasis,\r\n    untimedDownScheduled,\r\n  } as const;\r\n\r\n  // Decision heuristic\r\n  function valueOf(st: GameState): number {\r\n    // Higher is better for offense: consider yards gained towards offense goal and down/toGo\r\n    const yardsToOffGoal = distanceToOffenseGoal(pre, st.ballOn);\r\n    const yardsAdv = -(yardsToOffGoal) + distanceToOffenseGoal(pre, pre.ballOn);\r\n    const downValue = st.down === 1 ? 5 : (st.down === 2 ? 2 : (st.down === 3 ? 0 : -3));\r\n    const toGoValue = Math.max(0, 10 - st.toGo) * 0.2;\r\n    return yardsAdv + downValue + toGoValue;\r\n  }\r\n  const vAccept = valueOf(accepted);\r\n  const vDecline = valueOf(declined);\r\n  let decisionHint: 'accept' | 'decline' | 'neutral' = 'neutral';\r\n  if (vAccept > vDecline + 0.5) decisionHint = 'accept';\r\n  else if (vDecline > vAccept + 0.5) decisionHint = 'decline';\r\n\r\n  return { accepted, declined, decisionHint, adminMeta };\r\n}\r\n\r\n\r\n","export interface SpotContext {\r\n  ballOn: number; // 0..100, HOME perspective\r\n  possessing: 'player' | 'ai';\r\n}\r\n\r\nfunction clampYard(n: number): number {\r\n  return Math.max(0, Math.min(100, Math.round(n)));\r\n}\r\n\r\nexport function isInEndZone(absYard: number): boolean {\r\n  return absYard === 0 || absYard === 100;\r\n}\r\n\r\nexport function isThroughEndZone(absYard: number): boolean {\r\n  return absYard < 0 || absYard > 100;\r\n}\r\n\r\nexport function touchbackSpot(forReceiving: 'player' | 'ai'): number {\r\n  return forReceiving === 'player' ? 20 : 80;\r\n}\r\n\r\nexport function interceptionTouchback(ctx: SpotContext): { ballOn: number; possession: 'player' | 'ai' } {\r\n  const ballOn = touchbackSpot(ctx.possessing);\r\n  return { ballOn, possession: ctx.possessing };\r\n}\r\n\r\nexport function kickoffTouchback(forReceiving: 'player' | 'ai'): { ballOn: number; possession: 'player' | 'ai' } {\r\n  return { ballOn: touchbackSpot(forReceiving), possession: forReceiving };\r\n}\r\n\r\nexport function puntTouchback(forReceiving: 'player' | 'ai'): { ballOn: number; possession: 'player' | 'ai' } {\r\n  return { ballOn: touchbackSpot(forReceiving), possession: forReceiving };\r\n}\r\n\r\n// Apply “spot of kick or 20”: if the kick spot is beyond the 20 (closer to opponent),\r\n// take over at the spot; otherwise take at the 20.\r\nexport function missedFieldGoalSpot(state: SpotContext, attemptYards: number): { ballOn: number; possession: 'player' | 'ai' } {\r\n  const receiving: 'player' | 'ai' = state.possessing === 'player' ? 'ai' : 'player';\r\n  const spotOfKickAbs = clampYard(state.possessing === 'player' ? state.ballOn - 7 : state.ballOn + 7);\r\n  // Apply spot-of-kick or 20: for HOME (player) receiving, take max(20, spot); for AWAY (ai) receiving, take min(80, spot)\r\n  let newAbs: number;\r\n  if (receiving === 'player') newAbs = Math.max(20, spotOfKickAbs);\r\n  else newAbs = Math.min(80, spotOfKickAbs);\r\n  return { ballOn: clampYard(newAbs), possession: receiving };\r\n}\r\n\r\n\r\n","import type { GameState } from '../domain/GameState';\r\nimport type { RNG } from '../sim/RNG';\r\nimport { determineOutcomeFromCharts } from './Charts';\r\nimport type { Outcome } from './ResultParsing';\r\n// import { parseResultString } from './ResultParsing';\r\nimport { timeOffWithTwoMinute } from './Timekeeping';\r\nimport { administerPenalty } from './PenaltyAdmin';\r\nimport { isInEndZone, isThroughEndZone, interceptionTouchback } from './Spots';\r\nimport type { OffenseCharts } from '../data/schemas/OffenseCharts';\r\n\r\nexport interface ResolveInput {\r\n  state: GameState;\r\n  charts: OffenseCharts;\r\n  deckName: string;\r\n  playLabel: string;\r\n  defenseLabel: string;\r\n  rng: RNG;\r\n}\r\n\r\nexport interface ResolveResult {\r\n  state: GameState;\r\n  outcome: Outcome;\r\n  touchdown: boolean;\r\n  safety: boolean;\r\n  possessionChanged: boolean;\r\n}\r\n\r\nexport function applyYards(state: GameState, yards: number): GameState {\r\n  const next = { ...state };\r\n  if (state.possession === 'player') next.ballOn = Math.max(0, Math.min(100, state.ballOn + yards));\r\n  else next.ballOn = Math.max(0, Math.min(100, state.ballOn - yards));\r\n  return next;\r\n}\r\n\r\nfunction handleScoring(state: GameState): { state: GameState; touchdown: boolean; safety: boolean } {\r\n  const next = { ...state, score: { ...state.score } };\r\n  let touchdown = false;\r\n  let safety = false;\r\n  if (state.possession === 'player') {\r\n    if (state.ballOn >= 100) { next.score.player += 6; touchdown = true; }\r\n    if (state.ballOn <= 0) { next.score.ai += 2; safety = true; }\r\n  } else {\r\n    if (state.ballOn <= 0) { next.score.ai += 6; touchdown = true; }\r\n    if (state.ballOn >= 100) { next.score.player += 2; safety = true; }\r\n  }\r\n  return { state: next, touchdown, safety };\r\n}\r\n\r\nexport function resolvePlayCore(input: ResolveInput): ResolveResult {\r\n  let { state } = input;\r\n  const outcome = determineOutcomeFromCharts({\r\n    deckName: input.deckName,\r\n    playLabel: input.playLabel,\r\n    defenseLabel: input.defenseLabel,\r\n    charts: input.charts,\r\n    rng: input.rng,\r\n  });\r\n  // Penalty administration\r\n  if (outcome.category === 'penalty' && outcome.penalty) {\r\n    const pre = state;\r\n    // In penalty path, the post-play equals pre because we short-circuit before applying yards\r\n    const post = state;\r\n    const offenseGainedYards = 0;\r\n    const wasFirstDownOnPlay = false;\r\n    const admin = administerPenalty({\r\n      prePlayState: pre,\r\n      postPlayState: post,\r\n      offenseGainedYards,\r\n      outcome,\r\n      inTwoMinute: false,\r\n      wasFirstDownOnPlay,\r\n    });\r\n    const next = admin.decisionHint === 'decline' ? admin.declined : admin.accepted;\r\n    return { state: next, outcome, touchdown: false, safety: false, possessionChanged: false };\r\n  }\r\n  // Apply yards or category effects\r\n  let next = { ...state };\r\n  let possessionChanged = false;\r\n  if (outcome.category === 'gain' || outcome.category === 'loss') {\r\n    next = applyYards(state, outcome.yards);\r\n  } else if (outcome.category === 'incomplete') {\r\n    // no yard change\r\n  } else if (outcome.category === 'interception') {\r\n    // Flip possession and apply return yards relative to new offense direction\r\n    next.possession = state.possession === 'player' ? 'ai' : 'player';\r\n    possessionChanged = true;\r\n    // Spot at current LOS, then apply return towards new offense goal\r\n    const ret = outcome.interceptReturn || 0;\r\n    if (next.possession === 'player') next.ballOn = Math.max(0, Math.min(100, state.ballOn + ret));\r\n    else next.ballOn = Math.max(0, Math.min(100, state.ballOn - ret));\r\n    // End-zone handling after interception return movement\r\n    if (isThroughEndZone(next.ballOn)) {\r\n      const tb = interceptionTouchback({ ballOn: next.ballOn, possessing: next.possession });\r\n      next.ballOn = tb.ballOn;\r\n    } else if (isInEndZone(next.ballOn)) {\r\n      // By legacy behavior: touchback if downed in end zone; TD only if return legitimately crosses opposite goal in-bounds\r\n      const tb = interceptionTouchback({ ballOn: next.ballOn, possessing: next.possession });\r\n      next.ballOn = tb.ballOn;\r\n    }\r\n    // Reset downs\r\n    next.down = 1; next.toGo = 10;\r\n  } else if (outcome.category === 'fumble') {\r\n    // Simple turnover with no return\r\n    next.possession = state.possession === 'player' ? 'ai' : 'player';\r\n    possessionChanged = true;\r\n    next.down = 1; next.toGo = 10;\r\n  }\r\n  // First down logic only if we didn't already reset downs due to turnover\r\n  if (!possessionChanged && (outcome.category === 'gain' || outcome.category === 'loss')) {\r\n    const gained = Math.abs(outcome.yards);\r\n    const madeLine = gained >= state.toGo && outcome.yards > 0;\r\n    if (madeLine) {\r\n      next.down = 1;\r\n      next.toGo = 10;\r\n    } else {\r\n      next.down = Math.min(4, state.down + 1);\r\n      next.toGo = Math.max(1, madeLine ? 10 : state.toGo - Math.max(0, outcome.yards));\r\n    }\r\n  } else if (!possessionChanged && outcome.category === 'incomplete') {\r\n    next.down = Math.min(4, state.down + 1);\r\n  }\r\n  // Timekeeping\r\n  const wasFirstDown = !possessionChanged && (outcome.category === 'gain' && outcome.yards > 0 && outcome.yards >= state.toGo);\r\n  const timeOff = timeOffWithTwoMinute(outcome, false /* caller should pass real two-minute later */, wasFirstDown);\r\n  next.clock = Math.max(0, state.clock - timeOff);\r\n  // Scoring check\r\n  const scoreRes = handleScoring(next);\r\n  next = scoreRes.state;\r\n  return { state: next, outcome, touchdown: scoreRes.touchdown, safety: scoreRes.safety, possessionChanged };\r\n}\r\n"],"names":["LONG_GAIN_TABLE","rollD6","rng","resolveLongGain","roll","entry","m","DEFAULT_TIME_KEEPING","parseResultString","str","outcome","yards","onDefense","numMatch","completeMatch","m2","calculateTimeOff","TIME_KEEPING","timeOffWithTwoMinute","inTwoMinute","wasFirstDown","tk","timeOff","isIncomplete","isOut","DEF_NUM_TO_LETTER","DEF_LABEL_TO_NUM","DECK_NAME_TO_CHART_KEY","LABEL_TO_CHART_KEY","determineOutcomeFromCharts","params","deckName","playLabel","defenseLabel","charts","chartDeckKey","chartPlayKey","defNum","defLetter","deck","play","resultStr","resolveLG","clampBallOn","v","yardsTowardsOffense","pre","applyFromAbsolute","prevAbs","yardsTowardsOff","distanceToOffenseGoal","ballOnAbs","distanceToDefenseGoal","capHalfDistance","amount","capDistance","cap","recomputeDownAndDistance","newBallOn","resetFirstDown","yardsToGoal","lineToGainRemaining","isLongGain","computeTimeOff","untimed","makeBase","state","marchPenalty","basisAbs","pen","lgMidfield","measuredFromMidfieldForLG","spotBasis","startAbs","distToGoal","applied","capped","distToDefGoal","administerPenalty","ctx","post","declined","march","autoFD","dd","accepted","isRegulation","atZero","untimedDownScheduled","adminMeta","valueOf","st","yardsAdv","downValue","toGoValue","vAccept","vDecline","decisionHint","isInEndZone","absYard","isThroughEndZone","touchbackSpot","forReceiving","interceptionTouchback","applyYards","next","handleScoring","touchdown","safety","resolvePlayCore","input","admin","possessionChanged","ret","tb","madeLine","scoreRes"],"mappings":"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"}